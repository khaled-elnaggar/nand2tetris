// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    

    // Define wether C or A instruction
    And(a=instruction[15], b=true, out=isCInstruction);
    Not(in=isCInstruction, out=isAInstruction);

    // Decide which A value to take, from A instruction or C instruction
    Mux16(a=instruction, b=aluOutput, sel=isCInstruction, out=outA);


    // If C instruction and A is in destination (A=comp)
    And(a=isCInstruction, b=instruction[5], out=shouldUpdateAFromAlu);
    // Or if instruction is A 
    Or(a=shouldUpdateAFromAlu, b=isAInstruction, out=loadA);
    // Then update A register
    ARegister(in=outA, load=loadA, out=finalARegisterValue, out[0..14]=addressM);

    // If C instruction and D is in destination (D=comp)
    And(a=isCInstruction, b=instruction[4], out=shouldUpdateDFromAlu);
    DRegister(in=aluOutput, load=shouldUpdateDFromAlu, out=updatedDValue);

    // If C instruction and M is in destination (M=comp)
    And(a=isCInstruction, b=instruction[3], out=writeM);

    // Select ALUs operand, either A or M
    Mux16(a=finalARegisterValue, b=inM, sel=instruction[12], out=operandAorM);

    // Send control bits to ALU
    ALU(x=updatedDValue, y=operandAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOutput, out=outM, zr=aluOutputZero, ng=aluOutputNegative);


    // Calculate how to handle PC
    Inc16(in=pcOut, out=pcIncremented);

    // Check the zero and negative control from ALU
    Or(a=aluOutputZero, b=aluOutputNegative, out=LE);
    Not(in=LE, out=GT);
    Not(in=aluOutputNegative, out=aluOutputPositive);
    Or(a=aluOutputPositive, b=aluOutputZero, out=GE);
    Not(in=aluOutputZero, out=NE);

    // Check all possible combinations for jump
    Mux16(a=pcIncremented, b=finalARegisterValue, sel=GT, out=outGT);
    Mux16(a=pcIncremented, b=finalARegisterValue, sel=aluOutputZero, out=outEQ);
    Mux16(a=pcIncremented, b=finalARegisterValue, sel=GE, out=outGE);
    Mux16(a=pcIncremented, b=finalARegisterValue, sel=aluOutputNegative, out=outLT);
    Mux16(a=pcIncremented, b=finalARegisterValue, sel=NE, out=outNE);
    Mux16(a=pcIncremented, b=finalARegisterValue, sel=LE, out=outLE);

    // Depending on jjj pattern, select a jump
    Mux8Way16(a=pcIncremented, b=outGT, c=outEQ, d=outGE, e=outLT, f=outNE, g=outLE, h=finalARegisterValue, sel=instruction[0..2], out=nextPcInstruction);

    //
    PC(in=nextPcInstruction, load=isCInstruction, inc=isAInstruction, reset=reset, out=pcOut, out[0..14]=pc);

/*
    15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
C    1  1  1  a  c  c c c c c d d d j j j
	 0  0  1  1  0  0 0 0 0 0 1 1 1 0 0 1
*/

}